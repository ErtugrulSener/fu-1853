1.1   Was ist eine besondere Nachbedingung für jede Refaktorisierung? Wie kann sie überprüft werden? (4 P)

- Der refaktorisierte Code muss weiterhin kompilierbar sein

- Das es die Bedeutung des Programms nicht ändert

- Man prüft es, indem man verfügbare Unit Tests laufen lässt und sie weiterhin die selbe Meldung wie vor dem Refactoring geben (Ein Test könnte ja auch vor dem Refactoring fehlerhaft sein)

- Back-to-back Testen (ban benötigt aber ein Testframework, was notwendige Eingaben generiert und diese Tests automatisch durchführt).


1.2   Was ist beim Automatisieren von Refactorings zu beachten? (4 P)

- Es darf nicht zu Syntax oder Typfehlern durch das Refactoring kommen

- Richtig wäre: Moderne IDEs erlauben mit ihren APIs in der Regel den Zugriff auf den abstrakten Syntaxbaum eines Programms. Allerdings sind derartige APIs nicht sonderlich stabil, zum anderen unterliegen auch die Programmiersprachen, auf deren ASTs die Refactorings ausgeführt werden sollen, ständigen Änderungen.

- Man benötigt die Interpretation des Programmtextes (Modifikationen am AST werden gemacht), Suchen und Ersetzen genügt hier nicht!


1.3   Welche acht Vorbedingungen müssen für die Refaktorisierung „Vererbung durch Delegation ersetzen“ erfüllt sein? (8 P)

1. Die Superklasse darf nicht abstrakt sein

2. Die Konstruktoren der Superklasse müssen erreichbar sein von einer anderen Klasse (Dürfen also nicht private / protected sein)

3. Es darf keine Zuweisungen von Instanzen der zu refaktorisierienden Klasse (früher Sub-Klasse) an Variablen mit dem Typ der Superklasse geben, z.B: Lebewesen x = new Hund(), während Refactoring aktuell auf Klasse Hund ausgeführt wird

4. Instanzen der zu refaktorisierienden Klasse dürfen nicht per offener Rekursion von der ehemaligen Superklasse aufgerufen werden + die Aufrufe der ehem. Sub auf die Superklasse müssen nun angepasst werden, weil "this" die Eigenschaften der Superklasse nicht mehr trägt bzw. nicht darauf referenzieren kann

5. Der Zugriff auf Felder, die zuvor von der Superklasse geerbt wurden, geht nun ins Leere. Wäre das konsequent über Zugriffsmethoden umgesetzt, hätte man hier weiterleiten können (zur Instanzvariable und der Methode der Getter-Methode der ehem. Superklasse).

6. Die Methoden, die die Subklasse nutzt, müssen nach dem Refactoring immernoch erreichbar sein. Ist z.B eine Methode als protected definiert, ist dies nicht der Fall.

7. Bestimmte Subtypbeziehungen müssen aufrechterhalten werden, selbst wenn keine sie verlangenden Zuweisungen in einem Programm vorhanden sind:
So dürfen beispielsweise keine entsprechenden expliziten Typtests (in JAVA per instanceof oder getClass()) vorkommen und die Ableitung von sog. Unchecked exceptions wie Error und RuntimeException darf nicht durch eine von Throw-able ersetzt werden, damit der Compiler keine fehlenden Exception handler bzw. Throws-Klauseln moniert.

8. Wenn auf die Instanzen einer Subklasse synchronisierte Methoden aufgerufen werden, die teilweise von einer Superklasse geerbt werden, klappt die Synchronisation u. U. nicht mehr, da jetzt zwei anstelle eines Monitors herangezogen werden.


1.4   Mit welchen Refaktorisierungen kann man Bedingungen vereinfachen? (3 P)

- Replace nested conditional with guard clauses

- Decompose conditional

- Replace conditional with polymorphism

usw..


1.5   Macht es Sinn, das Refactoring „Superklasse extrahieren“ einzusetzen? Was muss man dabei beachten? (4 P)

Wenn zwei Klassen inhaltlich ähnlich sind, aber nicht eine Klasse logisch eine Superklasse des anderen ist, dann könnte man beiden Klassen eine gemeinsame Superklasse extrahieren. Wichtig ist eine inhaltliche Übereinstimmung, die die Substituierbarkeit der Instanzen gegeneinander gewährleistet.

Wenn dies gegeben ist, sollte die syntaktische Angleichung der Eigenschaften kein Problem sein.


1.6   Wann sollte man die Refaktorisierung „Interface extrahieren“ anwenden? (5 P)

Welche andere Rafoktorisierung hilft hier, die Methoden zu bestimmen, die ein extrahierendes Interface haben muss, damit es als Typ einer Variablen verwendbar ist?

Wie geht man vor, um den Typ der Variablen konstruktiv zu bestimmen?

1.) Man wendet das Refactoring an, wenn in einem bestimmten Kontext (z.B: einer Klasse) nur ein Subset des Protokolls benötigt wird.

2.) Infer Type

3.) Man setzt die Typinferenz ein, dabei wird ein Netz von Typconstraints erstellt, die die benötigte Typkonformität enthält. Das gesuchte Interface erfüllt alle Typconstraints und wird durch Traversierung der Typconstraints ermittelt.